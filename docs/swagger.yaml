swagger: '2.0'
host: 'procyon.local:9999'
basePath: /
schemes:
  - http
info:
  title: 카페테리아 서버 API
  version: 0.1.0
tags: []
paths:
  /cafeteria:
    get:
      summary: 모든 Cafeteria의 배열을 요청합니다.
      operationId: getCafeteria
      description: cafeteria 테이블의 열을 모두 읽은 뒤 직렬화하여 전달합니다.
      tags:
        - cafeteria
      responses:
        '200':
          schema:
            $ref: '#/definitions/Model1'
          description: Successful
        '400':
          schema:
            $ref: '#/definitions/Boom%20%EC%98%A4%EB%A5%98%20%EB%AA%A8%EB%8D%B8'
          description: Bad Request
        '500':
          schema:
            $ref: '#/definitions/Boom%20%EC%98%A4%EB%A5%98%20%EB%AA%A8%EB%8D%B8'
          description: Internal Server Error
  /corners:
    get:
      summary: 모든 Corner의 배열을 요청합니다.
      operationId: getCorners
      description: corners 테이블의 열을 모두 읽은 뒤 직렬화하여 전달합니다.
      parameters:
        - type: number
          description: 해당 Corner가 속한 Cafeteria의 id
          name: cafeteriaId
          in: query
      tags:
        - corners
      responses:
        '200':
          schema:
            $ref: '#/definitions/Model2'
          description: Successful
        '400':
          schema:
            $ref: '#/definitions/Boom%20%EC%98%A4%EB%A5%98%20%EB%AA%A8%EB%8D%B8'
          description: Bad Request
        '500':
          schema:
            $ref: '#/definitions/Boom%20%EC%98%A4%EB%A5%98%20%EB%AA%A8%EB%8D%B8'
          description: Internal Server Error
  /menus:
    get:
      summary: Menu를 요청합니다.
      operationId: getMenus
      description: 스마트 캠퍼스 서버로부터 주어진 날짜의 식단 정보를 요청하여 가공한 뒤 직렬화하여 전달합니다.
      parameters:
        - type: string
          description: 가져오고자 하는 Menu들의 날짜
          name: date
          in: query
        - type: number
          description: 가져오고자 하는 Menu들이 속한 Corner의 id. 특정 코너의 식단만 가져오고 싶을 때에 유용합니다.
          name: cornerId
          in: query
      tags:
        - menus
      responses:
        '200':
          schema:
            $ref: '#/definitions/Model3'
          description: Successful
        '400':
          schema:
            $ref: '#/definitions/Boom%20%EC%98%A4%EB%A5%98%20%EB%AA%A8%EB%8D%B8'
          description: Bad Request
        '500':
          schema:
            $ref: '#/definitions/Boom%20%EC%98%A4%EB%A5%98%20%EB%AA%A8%EB%8D%B8'
          description: Internal Server Error
  '/cafeteria/{id}':
    get:
      summary: 지정된 id를 가지는 Cafeteria를 요청합니다.
      operationId: getCafeteriaId
      description: cafeteria 테이블에서 주어진 id를 가지는 열을 읽은 뒤 직렬화하여 전달합니다.
      parameters:
        - type: number
          description: Cafeteria의 id.
          name: id
          in: path
          required: true
      tags:
        - cafeteria
      responses:
        '200':
          schema:
            $ref: '#/definitions/Cafeteria%20%EB%AA%A8%EB%8D%B8'
          description: Successful
        '400':
          schema:
            $ref: '#/definitions/Boom%20%EC%98%A4%EB%A5%98%20%EB%AA%A8%EB%8D%B8'
          description: Bad Request
        '500':
          schema:
            $ref: '#/definitions/Boom%20%EC%98%A4%EB%A5%98%20%EB%AA%A8%EB%8D%B8'
          description: Internal Server Error
  '/corners/{id}':
    get:
      summary: 지정된 id를 가지는 Corner를 요청합니다.
      operationId: getCornersId
      description: corners 테이블에서 주어진 id를 가지는 열을 읽은 뒤 직렬화하여 전달합니다.
      parameters:
        - type: number
          description: Corner의 id.
          name: id
          in: path
          required: true
      tags:
        - corners
      responses:
        '200':
          schema:
            $ref: '#/definitions/Corner%20%EB%AA%A8%EB%8D%B8'
          description: Successful
        '400':
          schema:
            $ref: '#/definitions/Boom%20%EC%98%A4%EB%A5%98%20%EB%AA%A8%EB%8D%B8'
          description: Bad Request
        '500':
          schema:
            $ref: '#/definitions/Boom%20%EC%98%A4%EB%A5%98%20%EB%AA%A8%EB%8D%B8'
          description: Internal Server Error
  /login:
    post:
      summary: 로그인을 요청합니다.
      operationId: postLogin
      description: 카페테리아 할인 대상자 여부를 판단하여 로그인을 처리합니다.
      parameters:
        - in: body
          name: body
          schema:
            $ref: >-
              #/definitions/Login%20%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%20%EB%AA%A8%EB%8D%B8
      tags:
        - login
      responses:
        '200':
          schema:
            $ref: '#/definitions/User%20%EB%AA%A8%EB%8D%B8'
          description: Successful
        '400':
          schema:
            $ref: '#/definitions/Boom%20%EC%98%A4%EB%A5%98%20%EB%AA%A8%EB%8D%B8'
          description: Bad Request
        '401':
          schema:
            $ref: '#/definitions/Boom%20%EC%98%A4%EB%A5%98%20%EB%AA%A8%EB%8D%B8'
          description: Unauthorized
        '403':
          schema:
            $ref: '#/definitions/Boom%20%EC%98%A4%EB%A5%98%20%EB%AA%A8%EB%8D%B8'
          description: Forbidden
        '500':
          schema:
            $ref: '#/definitions/Boom%20%EC%98%A4%EB%A5%98%20%EB%AA%A8%EB%8D%B8'
          description: Internal Server Error
  /logout:
    post:
      summary: 로그아웃을 요청합니다.
      operationId: postLogout
      description: 세션을 종료합니다.
      tags:
        - logout
      responses:
        '200':
          schema:
            type: string
          description: Successful
        '401':
          schema:
            $ref: '#/definitions/Boom%20%EC%98%A4%EB%A5%98%20%EB%AA%A8%EB%8D%B8'
          description: Unauthorized
        '500':
          schema:
            $ref: '#/definitions/Boom%20%EC%98%A4%EB%A5%98%20%EB%AA%A8%EB%8D%B8'
          description: Internal Server Error
definitions:
  Cafeteria 모델:
    type: object
    properties:
      id:
        type: number
        description: Cafeteria의 id
      name:
        type: string
        description: Cafeteria의 이름
      image-path:
        type: string
        description: Cafeteria 이미지 경로
  Model1:
    type: array
    items:
      $ref: '#/definitions/Cafeteria%20%EB%AA%A8%EB%8D%B8'
  Boom 오류 모델:
    type: object
    properties:
      statusCode:
        type: number
        description: HTTP 상태 코드
      error:
        type: string
        description: HTTP 에러 이름
      message:
        type: string
        description: 메시지
  Corner 모델:
    type: object
    properties:
      id:
        type: number
        description: Corner의 id
      name:
        type: string
        description: Corner의 이름
      cafeteria-id:
        type: number
        description: Corner가 속한 Cafeteria의 id
  Model2:
    type: array
    items:
      $ref: '#/definitions/Corner%20%EB%AA%A8%EB%8D%B8'
  Menu 모델:
    type: object
    properties:
      corner-id:
        type: number
        description: 해당 메뉴가 존재하는 코너의 id
      foods:
        type: string
        description: 공백 문자로 구분된 식단 소메뉴
      price:
        type: number
        description: 가격
      calorie:
        type: number
        description: 열량(kcal)
  Model3:
    type: array
    items:
      $ref: '#/definitions/Menu%20%EB%AA%A8%EB%8D%B8'
  Login 파라미터 모델:
    type: object
    properties:
      token:
        type: string
        description: 토큰
      id:
        type: string
        description: 학번
      password:
        type: string
        description: 비밀번호
  User 모델:
    type: object
    properties:
      id:
        type: number
        description: 학번
      token:
        type: string
        description: 로그인 토큰
      barcode:
        type: string
        description: 학생할인 바코드
